; For more information on the config file, please see:
; http://supervisord.org/configuration.html
;
; Notes:
;  - Shell expansion ("~" or "$HOME") is not supported.  Environment
;    variables can be expanded using this syntax: "%(ENV_HOME)s".
;  - Quotes around values are not supported, except in the case of
;    the environment= options as shown below.
;  - Comments must have a leading space: "a=b ;comment" not "a=b;comment".
;  - Command will be truncated if it looks like a config file comment, e.g.
;    "command=bash -c 'foo ; bar'" will truncate to "command=bash -c 'foo ".
;
; Warning:
;  Paths throughout this example file use /tmp because it is available on most
;  systems.  You will likely need to change these to locations more appropriate
;  for your system.  Some systems periodically delete older files in /tmp.
;  Notably, if the socket file defined in the [unix_http_server] section below
;  is deleted, supervisorctl will be unable to connect to supervisord.

[unix_http_server]
file=/tmp/supervisor.sock     ; the path to the socket file
;chmod=0700                   ; socket file mode (default 0700)
;chown=nobody:nogroup         ; socket file uid:gid owner
username=sean
password=%(ENV_SUPERVISOR_PW)s  ; set in ~/vps/secret

; Security Warning:
;  The inet HTTP server is not enabled by default.  The inet HTTP server is
;  enabled by uncommenting the [inet_http_server] section below.  The inet
;  HTTP server is intended for use within a trusted environment only.  It
;  should only be bound to localhost or only accessible from within an
;  isolated, trusted network.  The inet HTTP server does not support any
;  form of encryption.  The inet HTTP server does not use authentication
;  by default (see the username= and password= options to add authentication).
;  Never expose the inet HTTP server to the public internet.

[inet_http_server]          ; inet (TCP) server disabled by default
port=127.0.0.1:9001         ; ip_address:port specifier, *:port for all iface
username=sean
password=%(ENV_SUPERVISOR_PW)s  ; set in ~/vps/secret

[supervisord]
logfile=%(ENV_SUPERVISOR_LOGS)s/supervisord.log ; main log file
logfile_maxbytes=50MB        ; max main logfile bytes b4 rotation; default 50MB
logfile_backups=10           ; # of main logfile backups; 0 means none, default 10
loglevel=info                ; log level; default info; others: debug,warn,trace
pidfile=/tmp/supervisord.pid ; supervisord pidfile; default supervisord.pid
nodaemon=false               ; start in foreground if true; default false
silent=false                 ; no logs to stdout if true; default false
minfds=1024                  ; min. avail startup file descriptors; default 1024
minprocs=200                 ; min. avail process descriptors;default 200
;umask=022                   ; process file creation umask; default 022
user=sean                    ; setuid to this UNIX account at startup; recommended if root
;identifier=supervisor       ; supervisord identifier, default is 'supervisor'
;directory=/tmp              ; default is not to cd during start
;nocleanup=true              ; don't clean up tempfiles at start; default false
;childlogdir=/tmp            ; 'AUTO' child log dir, default $TEMP
;environment=KEY="value"     ; key value pairs to add to environment
;strip_ansi=false            ; strip ansi escape codes in logs; def. false

; The rpcinterface:supervisor section must remain in the config file for
; RPC (supervisorctl/web interface) to work.  Additional interfaces may be
; added by defining them in separate [rpcinterface:x] sections.

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

; The supervisorctl section configures how supervisorctl will connect to
; supervisord.  configure it match the settings in either the unix_http_server
; or inet_http_server section.

[supervisorctl]
serverurl=unix:///tmp/supervisor.sock ; use a unix:// URL  for a unix socket
username=sean
password=%(ENV_SUPERVISOR_PW)s ; same as [*_http_server]

; The sample program section below shows all possible program subsection values.
; Create one or more 'real' program: sections to be able to control them under
; supervisor.

[program:albums]
command=bash ./run_server
process_name=albums
directory=%(ENV_ALBUMS)s/server
autorestart=true
stopsignal=KILL
user=sean
stdout_logfile=%(ENV_ALBUMS_LOGS)s/out.log
stderr_logfile=%(ENV_ALBUMS_LOGS)s/error.log

[program:mal-id-cache]
command=bash ./push_changes %(ENV_CHECKER_MAL)s/cache
process_name=mal-id-cache
directory=%(ENV_HOME)s/.mal-id-cache/repo
autorestart=true
user=sean
stdout_logfile=%(ENV_MID_LOGS)s/out.log
stderr_logfile=%(ENV_MID_LOGS)s/error.log

[program:discord-countdown-bot]
command=bash -c "pipenv run python bot.py"
process_name=discord-countdown-bot
directory=%(ENV_COUNTDOWN_BOT)s
autorestart=true
stopwaitsecs=20             ; discord bot can take a while to log out
stdout_logfile=%(ENV_COUNTDOWN_LOGS)s/out.log
stderr_logfile=%(ENV_COUNTDOWN_LOGS)s/error.log

[program:wca-userinfo]
command=bash ./run_server
process_name=wca-userinfo
directory=%(ENV_WCA_USERINFO)s
autorestart=true
stdout_logfile=%(ENV_WCA_LOGS)s/out.log
stderr_logfile=%(ENV_WCA_LOGS)s/error.log

[program:mal-notify-bot]
command=bash -c "pipenv run python bot.py"
process_name=mal-notify-bot
directory=%(ENV_NOTIFY_BOT)s
autorestart=true
stopwaitsecs=20             ; discord bot can take a while to log out
stdout_logfile=%(ENV_NOTIFY_LOGS)s/out.log
stderr_logfile=%(ENV_NOTIFY_LOGS)s/error.log

[program:jikan]
command=docker-compose up
process_name=jikan
directory=%(ENV_DOCKER_JIKAN)s/v3
autorestart=true
startsecs=5
stopwaitsecs=15
stdout_logfile=%(ENV_DOCKER_LOGS)s/out.log
stderr_logfile=%(ENV_DOCKER_LOGS)s/error.log

[program:glue-server]
command=bash ./production_server --run
process_name=glue-server
directory=%(ENV_GLUE)s
autorestart=true
startsecs=15
stdout_logfile=%(ENV_GLUE_LOGS)s/out.log
stderr_logfile=%(ENV_GLUE_LOGS)s/err.log

[program:checker-mal-server]
command=bash ./production_server --run
process_name=checker-mal-server
directory=%(ENV_CHECKER_MAL)s
autorestart=true
startsecs=15
stdout_logfile=%(ENV_CHECKER_MAL_LOGS)s/out.log
stderr_logfile=%(ENV_CHECKER_MAL_LOGS)s/err.log

[program:update-logs]
command=bash ./update_logs
process_name=update-logs
directory=%(ENV_VPS_DIR)s
autorestart=true

[program:todotxt-notify]
command=mix run --no-halt
process_name=todotxt-notify
directory=%(ENV_TODO_NOTIFY)s
autorestart=true
stdout_logfile=%(ENV_TODO_NOTIFY_LOGS)s/out.log
stderr_logfile=%(ENV_TODO_NOTIFY_LOGS)s/err.log

[program:projects]
command=yarn prod-server
process_name=projects
directory=%(ENV_PROJECTS)s
autorestart=true
stopsignal=QUIT
stopasgroup=true
stdout_logfile=%(ENV_PROJECTS_LOGS)s/out.log
stderr_logfile=%(ENV_PROJECTS_LOGS)s/err.log

[program:projects-update]
command=bash ./bg_update
process_name=projects-update
directory=%(ENV_PROJECTS)s
autorestart=true
stdout_logfile=%(ENV_PROJECTS_LOGS)s/update_out.log
stderr_logfile=%(ENV_PROJECTS_LOGS)s/update_err.log

[program:dotfiles-serve]
command=subpath-serve -folder %(ENV_HOME)s/.dotfiles -port 8050
process_name=dotfiles-serve
autorestart=true

[program:shorturl]
command=no-db-static-shorturl -data-folder %(ENV_HOME)s/shorturls
process_name=shorturl
autorestart=true

[eventlistener:superhooks-discord]
command=superhooks-discord -f %(ENV_HOME)s/.discord_web_hook.txt -e BACKOFF,FATAL,EXITED,UNKNOWN
events=PROCESS_STATE,TICK_60
buffer_size=25
