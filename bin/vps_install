#!/usr/bin/env bash

# cd to a directory; exit if cd failed
cd_or_exit() {
	if [[ ! -d "$1" ]]; then
		printf "Could not cd into directory: %s\n" "$1"
		exit 1
	else
		cd "$1" || exit $?
	fi
}

# require that a executable be installed
require() {
	if [[ ! $(command -v "$1") ]]; then
		printf "requires %s, Install that and re-run\n" "$1"
		exit 1
	fi
}

# clone $1 (URL) if $2 (directory) doesn't exist
clone_if_not_exists() {
	if [[ ! -d "$2" ]]; then
		git clone "$1" "$2"
	fi
}

# mkdir if first arg doesn't exist
mkdir_if_not_exists() {
	if [[ ! -d "$1" ]]; then
		mkdir -p "$1"
	fi
}

# make sure a file exists or exit
expect_file() {
	if [[ ! -f "$1" ]]; then
		printf "Fatal error: Expected file at %s\n" "$1"
		exit 1
	fi
}

# setup asdf
# https://asdf-vm.com/#/core-manage-asdf
[[ ! -d "${HOME}/.asdf" ]] && git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.8.1
# setup https://github.com/asdf-vm/asdf-elixir w/ recent versions of erlang/elixir
# by building from source -- especially important that erlang is built from source
# because my debian installs seem to break often with ssl/other erlang-dev upgrades

# add asdf global versions to $PATH
export PATH="${HOME}/.asdf/shims/:$PATH"

[[ ! -e "${HOME}/.pyenv" ]] && git clone https://github.com/pyenv/pyenv.git ~/.pyenv

require pyenv

# install and setup pyenv versions if they dont exist
pyenv install 3.10.2 --skip-existing
pyenv install 3.11.3 --skip-existing

# symbolic links to pyenv versions if they dont exist in /usr/bin
[[ ! -e /usr/bin/python3.10 ]] && sudo ln -s "${HOME}/.pyenv/versions/3.10.2/bin/python3.10" /usr/bin/python3.10
[[ ! -e /usr/bin/python3.11 ]] && sudo ln -s "${HOME}/.pyenv/versions/3.11.3/bin/python3.11" /usr/bin/python3.11

echo 'Installing bgproc...'
curl -sL 'https://raw.githubusercontent.com/purarue/bgproc/refs/heads/master/bgproc' >"${HOME}/.local/bin/bgproc"
chmod +x "${HOME}/.local/bin/bgproc"

require python3.10
require python3.11
require crontab
require realpath
require supervisord
require jq
require elixir
require rsync
require htpasswd
require uglifycss
require yarn
require go
require cargo

cargo install evry readenv wait-for-internet cargo-update du-dust procs

# other things that are useful on here
GO111MODULE=on go install 'mvdan.cc/sh/v3/cmd/shfmt@latest'

declare THIS_DIR
THIS_DIR="$(realpath "$(dirname "${BASH_SOURCE[0]}")")"
VPS_DIR="${THIS_DIR}/.."
source "${VPS_DIR}/directories"
declare -rx VPS_DIR

# ssh key for mal-id-cache
expect_file "${HOME}/.ssh/bot_sean"

mkdir_if_not_exists "$CODE"
mkdir_if_not_exists "$MID_CACHE"
# remsync, private and public
mkdir_if_not_exists "$HOME/f"
mkdir_if_not_exists "$HOME/p"     # public files
mkdir_if_not_exists "$HOME/.ytdl" # music
mkdir_if_not_exists "$HOME/.credentials"

cd_or_exit "${CODE}"

clone_if_not_exists "git@github.com:purarue/mal-id-cache.git" "$MID_CACHE_REPO"
clone_if_not_exists "git@github.com:purarue/mal-notify-bot.git" "$NOTIFY_BOT"
clone_if_not_exists "git@github.com:purarue/discord-countdown-bot.git" "$COUNTDOWN_BOT"
clone_if_not_exists "git@github.com:purarue/exobrain.git" "$EXOBRAIN"
clone_if_not_exists "https://github.com/purarue/mal-id-cache" "$NOTIFY_BOT/mal-id-cache"
clone_if_not_exists "git@github.com:purarue/glue.git" "$GLUE"
clone_if_not_exists "git@github.com:purarue/mnu_gsheets.git" "$MNU_GSHEETS"
clone_if_not_exists "git@github.com:Hiyori-API/checker_mal.git" "$CHECKER_MAL"
clone_if_not_exists "git@github.com:purarue/projects.git" "$PROJECTS"
clone_if_not_exists "git@github.com:purarue/my_feed.git" "$MY_FEED"
clone_if_not_exists "git@github.com:purarue/dbsentinel.git" "$DBSENTINEL"
clone_if_not_exists "git@github.com:purarue/currently_listening.git" "$CURRENTLY_LISTENING"
clone_if_not_exists "git@github.com:purarue/filmswap.git" "$FILMSWAP"

expect_file "$NOTIFY_BOT/token.yaml"
expect_file "$NOTIFY_BOT/old"
expect_file "$COUNTDOWN_BOT/token.yaml"
expect_file "${HOME}/.discord_web_hook.txt"
expect_file "${MNU_GSHEETS}/client_secret.json"
expect_file "${FILMSWAP}/.env"

set -u

# create log directories if they dont exist
mkdir_if_not_exists "$MID_LOGS"
mkdir_if_not_exists "$NOTIFY_LOGS"
mkdir_if_not_exists "$COUNTDOWN_LOGS"
mkdir_if_not_exists "$GLUE_LOGS"
mkdir_if_not_exists "$SUPERVISOR_LOGS"
mkdir_if_not_exists "$CHECKER_MAL_LOGS"
mkdir_if_not_exists "$SHORTURL_DATA"
mkdir_if_not_exists "$PROJECTS_LOGS"
mkdir_if_not_exists "$MY_FEED_LOGS"
mkdir_if_not_exists "$CLIPBOARD_LOGS"
mkdir_if_not_exists "$DBSENTINEL_LOGS"
mkdir_if_not_exists "$CURRENTLY_LOGS"
mkdir_if_not_exists "$FILMSWAP_LOGS"
mkdir_if_not_exists "$TRACK_LOGS"

set +u

# some stuff I use in scripts
python3.11 -m pip install -U click pyyaml toml requests pipenv virtualenv rifleman git+https://github.com/purarue/calcurse-load

# https://www.digitalocean.com/community/tutorials/how-to-set-up-basic-http-authentication-with-nginx-on-ubuntu-14-04
if [[ ! -e /etc/nginx/.htpasswd ]]; then
	sudo htpasswd -c /etc/nginx/.htpasswd sean
fi

cd_or_exit "$DBSENTINEL"
python3.11 -m virtualenv -p python3.10 .venv
./scripts/in_venv pip install -r requirements.txt

cd_or_exit "$FILMSWAP"
python3 -m virtualenv .venv -p "$(which python3.11)"
./.venv/bin/pip install -r requirements.txt

cd_or_exit "$CURRENTLY_LISTENING"
make

cd_or_exit "$MY_FEED"
cd_or_exit ./backend
./build
cd_or_exit "$MY_FEED"
cd_or_exit ./frontend
yarn

cd_or_exit "$PROJECTS"
yarn # install
yarn prod-build
pip3 install --user -r ./requirements.txt

cd_or_exit "$MNU_GSHEETS"
python3.11 -m pipenv --python "$(command -v python3.10)"
python3.11 -m pipenv install

# elixir
mix local.hex --force
mix local.rebar --force

# generate a nicer error 502 error page
go install -v "github.com/purarue/darker_errors@latest"

# my url shortener URLs
go install -v "github.com/purarue/no-db-shorturl@latest"

# server that serves my dotfiles
readonly LOCAL_DOTFILES="$HOME/.dotfiles"
readonly LOCAL_UTILS="$HOME/.utils"
clone_if_not_exists "https://github.com/purarue/dotfiles.git" "$LOCAL_DOTFILES"
clone_if_not_exists "https://github.com/purarue/pura-utils.git" "$LOCAL_UTILS"

go install -v "github.com/purarue/subpath-serve@latest"
go install -v "github.com/purarue/server_clipboard/cmd/server_clipboard@latest"

# setup mal id cache
cd_or_exit "$MID_CACHE_REPO"
git config user.email "72600123+bot-pura@users.noreply.github.com"
git config user.name "bot-pura"

# setup notify bot
cd_or_exit "$NOTIFY_BOT"
python3.11 -m pipenv --python "$(command -v python3.10)"
python3.11 -m pipenv install

# setup countdown bot
cd_or_exit "$COUNTDOWN_BOT"
python3.11 -m pipenv --python "$(command -v python3.10)"
python3.11 -m pipenv install

# install superhooks-discord
python3.11 -m pip install --user git+https://github.com/purarue/superhooks

# nginx logs
groups | grep -q "adm" || sudo usermod -a -G adm "$(whoami)"

# configure crontabs
# shellcheck disable=SC2016
crontab -l | grep -q dotfiles || echo 'add "*/10 * * * * sh -c "cd $HOME/.dotfiles && git reset --hard HEAD && git pull"" to your crontab"'
