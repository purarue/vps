#!/usr/bin/env bash
# Backs up cache/credential/data files

# require that a executable be installed
require() {
	if [[ ! $(command -v "$1") ]]; then
		printf "requires %s, Install that and re-run\n" "$1"
		exit 1
	fi
}

# mkdir if first arg doesnt exist
mkdir_if_not_exists() {
	if [[ ! -d "$1" ]]; then
		mkdir -p "$1"
	fi
}

# make sure a file exists or exit
expect_file_and_copy() {
	if [[ ! -f "$1" ]]; then
		printf "Fatal error: Expected file at %s\n" "$1"
		exit 1
	fi
	cp "$1" "$2"
}

expect_dir_and_copy() {
	if [[ ! -d "$1" ]]; then
		printf "Fatal Error: no such directory %s\n" "$1"
		exit 1
	fi
	cp -R "$1" "$BACKUP_DIR" 2>/dev/null
}

optional_copy() {
	if [[ -f "$1" ]]; then
		cp "$1" "$2"
	else
		printf "Warning: Expected file at %s\n" "$1"
	fi
}

delete_if_exists() {
	[[ -d "$1" || -f "$1" ]] && rm -rf "$1" && printf "Removed '%s'\n" "$1"
}

require tar
require realpath

CUR_DIR="$(realpath "$(dirname "${BASH_SOURCE[0]}")")"
cd "$CUR_DIR"
source "${CUR_DIR}/directories"

BACKUP_DIR_NAME="backup_dir"
BACKUP_DIR="${CUR_DIR}/${BACKUP_DIR_NAME}"
BACKUP_COUNTDOWN="${BACKUP_DIR}"/countdown
BACKUP_NOTIFY="${BACKUP_DIR}"/notify
BACKUP_UNAPPROVED="${BACKUP_DIR}"/unapproved
BACKUP_TAR_NAME="${BACKUP_DIR_NAME}.tar.gz"

delete_if_exists "$BACKUP_DIR"
delete_if_exists "$BACKUP_TAR_NAME"

mkdir_if_not_exists "$BACKUP_COUNTDOWN"
mkdir_if_not_exists "$BACKUP_NOTIFY"
mkdir_if_not_exists "$BACKUP_UNAPPROVED"

expect_file_and_copy "$NOTIFY_BOT/token.yaml" "$BACKUP_NOTIFY"
expect_file_and_copy "$NOTIFY_BOT/old" "$BACKUP_NOTIFY"
expect_file_and_copy "$COUNTDOWN_BOT/token.yaml" "$BACKUP_COUNTDOWN"
expect_file_and_copy "$UNAP_SERVER/unapproved_info.json" "$BACKUP_UNAPPROVED"
optional_copy "$COUNTDOWN_BOT/server.db" "$BACKUP_COUNTDOWN"
optional_copy "$HOME/.bashrc" "$BACKUP_DIR"
optional_copy "$HOME/.bash_profile" "$BACKUP_DIR"
optional_copy '/var/log/nginx/access.log' "$BACKUP_DIR"

expect_dir_and_copy "/etc/netdata"
expect_dir_and_copy "/etc/nginx"
expect_dir_and_copy "/etc/fail2ban"
expect_dir_and_copy "$HOME/.todo"
expect_dir_and_copy "$HOME/shorturls"

tar -cvf "$BACKUP_TAR_NAME" "$BACKUP_DIR_NAME" && printf "Created '%s'\n" "$BACKUP_TAR_NAME"
delete_if_exists "$BACKUP_DIR"
